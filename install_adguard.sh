#!/bin/sh

# Script to install, configure, or uninstall AdGuard Home on OpenWrt
# Run with: sh script_name.sh
# Will prompt interactively for LAN interface, IP address, DNS port, or uninstall
# Generated by Grok 3, built by xAI

# ANSI color codes
GREEN="\033[32m"
YELLOW="\033[33m"
RED="\033[31m"
RESET="\033[0m"

# Check if running as root
if [ "$(id -u)" -ne 0 ]; then
    echo "Error: This script must be run as root. Log in as root or check your permissions."
    exit 1
fi

echo "Starting AdGuard Home script..."

# Check if AdGuard Home is already installed
if opkg list-installed | grep -q adguardhome; then
    echo "AdGuard Home is already installed."
    echo "Would you like to uninstall it and revert changes? (y/N): "
    read uninstall_choice
    case "$uninstall_choice" in
        "y"|"Y")
            echo "Uninstalling AdGuard Home and reverting changes..."

            BACKUP_DIR=$(ls -d /tmp/adguard_install_backup_* 2>/dev/null | tail -n 1)
            if [ -n "$BACKUP_DIR" ] && [ -d "$BACKUP_DIR" ]; then
                echo "Found backup directory: $BACKUP_DIR"
                if [ -f "$BACKUP_DIR/dhcp_backup.txt" ]; then
                    uci import dhcp < "$BACKUP_DIR/dhcp_backup.txt"
                    uci commit dhcp
                    for i in 1 2 3; do
                        if service dnsmasq restart; then
                            break
                        else
                            echo -e "${YELLOW}Warning: dnsmasq restart failed (attempt $i/3). Retrying...${RESET}"
                            sleep 2
                        fi
                    done
                    if ! service dnsmasq status | grep -q "running"; then
                        echo -e "${RED}Error: dnsmasq failed to restart during uninstall. DNS resolution might be affected.${RESET}"
                    fi
                fi
                if [ -f "$BACKUP_DIR/firewall_backup.txt" ]; then
                    uci import firewall < "$BACKUP_DIR/firewall_backup.txt"
                    uci commit firewall
                    service firewall restart || echo "Warning: firewall restart failed"
                fi
                AGH_CONFIG="/etc/adguardhome.yaml"
                if [ -f "$BACKUP_DIR/adguardhome.yaml.bak" ]; then
                    cp "$BACKUP_DIR/adguardhome.yaml.bak" "$AGH_CONFIG"
                fi
            else
                echo "Warning: No backup directory found in /tmp. Performing basic cleanup..."
                uci -q del dhcp.@dnsmasq[0].server
                uci set dhcp.@dnsmasq[0].noresolv="0"
                uci set dhcp.@dnsmasq[0].cachesize="150"
                uci commit dhcp
                for i in 1 2 3; do
                    if service dnsmasq restart; then
                        break
                    else
                        echo -e "${YELLOW}Warning: dnsmasq restart failed (attempt $i/3). Retrying...${RESET}"
                        sleep 2
                    fi
                done
                if ! service dnsmasq status | grep -q "running"; then
                    echo -e "${RED}Error: dnsmasq failed to restart during uninstall. DNS resolution might be affected.${RESET}"
                fi
                uci -q del firewall.@redirect[$(uci show firewall | grep -c "AGH-DNS-Interception")-1]
                uci commit firewall
                service firewall restart || echo "Warning: firewall restart failed"
            fi

            service adguardhome stop
            service adguardhome disable
            opkg remove adguardhome

            echo "Removing AdGuard Home configuration files..."
            rm -f /etc/adguardhome.yaml
            rm -f /etc/config/adguardhome
            [ -d /etc/adguardhome ] && rm -rf /etc/adguardhome

            echo "AdGuard Home uninstalled and changes reverted as best as possible."
            if [ -n "$BACKUP_DIR" ]; then
                echo "Backup directory $BACKUP_DIR remains in /tmp until reboot."
            else
                echo "Note: Without backups, some settings may not be fully restored to pre-install state."
            fi
            echo "Script generated by Grok 3, built by xAI."
            exit 0
            ;;
        *)
            echo "Keeping AdGuard Home installed. Exiting."
            echo "Script generated by Grok 3, built by xAI."
            exit 0
            ;;
    esac
fi

echo "AdGuard Home not detected. Proceeding with installation..."

# Warning about connectivity
echo -e "${RED}WARNING: Interrupting this script, or failing to configure AdGuard's Initial setup,${RESET}"
echo -e "${RED}*WILL* break internet connectivity.${RESET}"
echo "To fix, run the script again to complete the setup,"
echo "or if the script detects AdGuard is installed, you can opt to uninstall."
echo "Alternatively, you can fix it via LuCI:"
echo "1. Firewall > Port Forwards: Uncheck 'AGH-DNS-Interception', Save & Apply."
echo "2. Network > Hostnames > DHCP and DNS > General: Uncheck 'Ignore resolve file', Save & Apply."
echo "Backups will be created in /tmp to revert changes if needed."
echo "Press Enter to continue or Ctrl+C to abort."
read dummy

# Probe for default LAN interface
DEFAULT_LAN_IFACE=$(uci -q get network.lan.ifname || echo "br-lan")
if [ -z "$DEFAULT_LAN_IFACE" ] || ! /sbin/ip link show "$DEFAULT_LAN_IFACE" > /dev/null 2>&1; then
    DEFAULT_LAN_IFACE="br-lan"
fi
echo "Detected LAN interface: $DEFAULT_LAN_IFACE"

# Prompt for LAN interface
echo "Please enter the LAN interface name or press Enter to use default ($DEFAULT_LAN_IFACE):"
echo "Interface [$DEFAULT_LAN_IFACE]: "
read LAN_IFACE
LAN_IFACE=${LAN_IFACE:-$DEFAULT_LAN_IFACE}

if ! /sbin/ip link show "$LAN_IFACE" > /dev/null 2>&1; then
    echo "Error: Interface $LAN_IFACE not found."
    exit 1
fi
echo "Using LAN interface: $LAN_IFACE"

# Get the default IPv4 Address
DEFAULT_NET_ADDR=$(/sbin/ip -o -4 addr list "$LAN_IFACE" | awk 'NR==1{ split($4, ip_addr, "/"); print ip_addr[1]; exit }')
if [ -z "$DEFAULT_NET_ADDR" ]; then
    echo "Error: Could not determine default IP address for $LAN_IFACE"
    exit 1
fi
echo -e "Detected router IPv4: ${GREEN}$DEFAULT_NET_ADDR${RESET}"

# Prompt for IP address
echo -e "Please enter the IP address for AdGuard Home or press Enter to use default (${GREEN}$DEFAULT_NET_ADDR${RESET}):"
echo -e "IP [${GREEN}$DEFAULT_NET_ADDR${RESET}]: "
read NET_ADDR
NET_ADDR=${NET_ADDR:-$DEFAULT_NET_ADDR}

if ! echo "$NET_ADDR" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$' > /dev/null; then
    echo "Error: Invalid IP address format. Must be in the form x.x.x.x"
    exit 1
fi
echo -e "Using IP address: ${GREEN}$NET_ADDR${RESET}"

# Prompt for DNS port
echo -e "Please enter the DNS port for AdGuard Home or press Enter to use default (${GREEN}5353${RESET}):"
echo -e "Port [${GREEN}5353${RESET}]: "
read DNS_PORT
DNS_PORT=${DNS_PORT:-5353}

if ! echo "$DNS_PORT" | grep -E '^[0-9]+$' > /dev/null || [ "$DNS_PORT" -lt 1 ] || [ "$DNS_PORT" -gt 65535 ]; then
    echo "Error: Invalid port number. Must be between 1 and 65535."
    exit 1
fi
echo -e "Using DNS port: ${GREEN}$DNS_PORT${RESET}"

# Backup existing configurations
echo "Backing up existing configurations..."
BACKUP_DIR="/tmp/adguard_install_backup_$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"
uci export dhcp > "$BACKUP_DIR/dhcp_backup.txt" 2>/dev/null || echo "No DHCP config to backup"
uci export firewall > "$BACKUP_DIR/firewall_backup.txt" 2>/dev/null || echo "No firewall config to backup"
echo "Backups saved to: $BACKUP_DIR"

# Rollback function
rollback() {
    echo "Error detected. Rolling back changes..."
    if [ -f "$BACKUP_DIR/dhcp_backup.txt" ]; then
        uci import dhcp < "$BACKUP_DIR/dhcp_backup.txt"
        uci commit dhcp
        for i in 1 2 3; do
            if service dnsmasq restart; then
                break
            else
                echo -e "${YELLOW}Warning: dnsmasq restart failed (attempt $i/3). Retrying...${RESET}"
                sleep 2
            fi
        done
        if ! service dnsmasq status | grep -q "running"; then
            echo -e "${RED}Error: dnsmasq failed to restart during rollback. DNS resolution might be affected.${RESET}"
        fi
    fi
    if [ -f "$BACKUP_DIR/firewall_backup.txt" ]; then
        uci import firewall < "$BACKUP_DIR/firewall_backup.txt"
        uci commit firewall
        service firewall restart
    fi
    if opkg list-installed | grep -q adguardhome; then
        service adguardhome stop
        opkg remove adguardhome
    fi
    rm -f /etc/adguardhome.yaml
    rm -f /etc/config/adguardhome
    [ -d /etc/adguardhome ] && rm -rf /etc/adguardhome
    # Clean up backup directory on rollback
    if [ -d "$BACKUP_DIR" ]; then
        rm -rf "$BACKUP_DIR"
        echo "Backup directory $BACKUP_DIR removed as part of rollback."
    fi
    echo "Rollback completed. Original settings restored."
    echo "Script generated by Grok 3, built by xAI."
    exit 1
}

# Check internet connectivity
echo "Checking internet connectivity..."
if ! ping -c 3 8.8.8.8 > /dev/null 2>&1; then
    echo "Warning: No internet connectivity detected. Installation might fail."
    echo "Continue anyway? (y/N): "
    read choice
    case "$choice" in
        "y"|"Y") ;;
        *) echo "Aborting."; exit 1;;
    esac
fi

# Check WAN status
echo "Checking WAN connectivity..."
if ! ifstatus wan | grep -q '"up": true'; then
    echo -e "${YELLOW}Warning: WAN interface is down. Attempting to bring it up...${RESET}"
    ifdown wan
    ifup wan
    sleep 10  # Give it time to acquire a lease
    if ! ifstatus wan | grep -q '"up": true'; then
        echo -e "${RED}Error: WAN interface failed to come up. Check network configuration.${RESET}"
        rollback
    fi
fi

# Install AdGuard Home with architecture check and curl fallback
echo "Installing AdGuard Home..."
opkg update
FALLBACK_USED=0
if ! opkg install adguardhome; then
    echo -e "${YELLOW}Warning: opkg install failed. Attempting manual download with architecture check...${RESET}"
    ARCH=$(uname -m)
    case "$ARCH" in
        "x86_64")
            ARCH_DIR="x86_64"
            ;;
        "armv7l"|"arm")
            ARCH_DIR="arm_cortex-a9"
            ;;
        "mips"|"mipsel")
            ARCH_DIR="mipsel_24kc"
            ;;
        *)
            echo -e "${RED}Error: Unsupported architecture '$ARCH'. Please install adguardhome manually for your architecture.${RESET}"
            rollback
            ;;
    esac

    ADGUARD_URL="https://downloads.openwrt.org/releases/24.10.0/packages/${ARCH_DIR}/packages/adguardhome_0.107.56-r1_${ARCH_DIR}.ipk"
    echo "Attempting to download AdGuard Home for architecture ${ARCH} from $ADGUARD_URL"
    if curl -L "$ADGUARD_URL" -o adguardhome.ipk; then
        echo "Download successful. Installing..."
        if opkg install ./adguardhome.ipk; then
            rm -f adguardhome.ipk
            FALLBACK_USED=1
            echo "Cleaning up AdGuard Home configuration files after fallback installation..."
            rm -f /etc/adguardhome.yaml
            rm -f /etc/config/adguardhome
            [ -d /etc/adguardhome ] && rm -rf /etc/adguardhome
            echo "Configuration files cleaned. Please configure AdGuard Home via http://$NET_ADDR:3000/install.html"
        else
            echo -e "${RED}Error: Failed to install manually downloaded package.${RESET}"
            rm -f adguardhome.ipk
            rollback
        fi
    else
        echo -e "${RED}Error: Failed to download AdGuard Home package for architecture ${ARCH}.${RESET}"
        rm -f adguardhome.ipk
        rollback
    fi
fi

# Verify installation
if ! opkg list-installed | grep -q adguardhome; then
    echo -e "${RED}Error: AdGuard Home is not installed.${RESET}"
    rollback
fi

# Configure AdGuard Home DNS port
echo "Configuring AdGuard Home DNS port..."
AGH_CONFIG="/etc/adguardhome.yaml"
if [ -f "$AGH_CONFIG" ]; then
    cp "$AGH_CONFIG" "$BACKUP_DIR/adguardhome.yaml.bak"
    sed -i "s/bind_port: [0-9]*/bind_port: $DNS_PORT/" "$AGH_CONFIG" || echo "Warning: Could not update AdGuard Home config"
else
    echo "Warning: AdGuard Home config file not found. Using default settings."
fi

# Enable and start AdGuard Home
service adguardhome enable
if ! service adguardhome start; then
    echo "Warning: AdGuard Home failed to start. Check configuration."
fi

# Configure DNS forwardings & Dnsmasq tweaks
echo "Configuring DNS settings..."
uci -q del dhcp.@dnsmasq[0].server
uci set dhcp.@dnsmasq[0].domain="lan"
uci set dhcp.@dnsmasq[0].local="/lan/"
uci set dhcp.@dnsmasq[0].expandhosts="1"
uci set dhcp.@dnsmasq[0].cachesize="0"
uci set dhcp.@dnsmasq[0].noresolv="1"
uci add_list dhcp.@dnsmasq[0].server="$NET_ADDR#$DNS_PORT"
uci commit dhcp

# Restart dnsmasq with retry
for i in 1 2 3; do
    if service dnsmasq restart; then
        break
    else
        echo -e "${YELLOW}Warning: dnsmasq restart failed (attempt $i/3). Retrying...${RESET}"
        sleep 2
    fi
done
if ! service dnsmasq status | grep -q "running"; then
    echo -e "${RED}Error: dnsmasq failed to restart. DNS resolution might be affected.${RESET}"
    rollback
fi

# Configure DNS Interception with firewall
echo "Setting up DNS interception..."
uci add firewall redirect
uci set firewall.@redirect[-1].dest="lan"
uci set firewall.@redirect[-1].target="DNAT"
uci set firewall.@redirect[-1].name="AGH-DNS-Interception"
uci set firewall.@redirect[-1].src="lan"
uci set firewall.@redirect[-1].src_dport="53"
uci set firewall.@redirect[-1].dest_ip="$NET_ADDR"
uci set firewall.@redirect[-1].dest_port="$DNS_PORT"
uci commit firewall

# Restart firewall
if ! service firewall restart; then
    echo "Warning: Firewall restart failed. DNS interception might not work."
fi

# Verify AdGuard Home
echo "Verifying installation..."
sleep 2
if service adguardhome status | grep -q "running"; then
    echo "AdGuard Home installation and configuration completed successfully!"
    echo -e "Initial setup URL: ${GREEN}http://$NET_ADDR:3000/install.html${RESET}"
    echo -e "Admin Web Interface: (port ${GREEN}8080${RESET})"
    echo -e "DNS server port: ${GREEN}$DNS_PORT${RESET}"
    echo "Default login: Check AdGuard Home documentation for initial credentials"
    echo "Note: You may need to configure AdGuard Home via its web interface"
    echo "Backup directory $BACKUP_DIR remains in /tmp until reboot."
    echo "Script generated by Grok 3, built by xAI."
else
    echo "Error: AdGuard Home service is not running."
    echo "Check logs with: logread | grep adguard"
    echo "Backups are in $BACKUP_DIR (can be removed if everything works)"
    rollback
fi
